////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step, arr=[]) {
  if(step > 0){
  if(start < end){
    for(let i = start; i <= end; i+=step){
      arr.push(i);
    }
  } else if(start > end){
    for(let j = start; j >= end; j-=step){
      arr.push(j);
    }
  }
} else if(step === 0 || !step){
  if(start < end){
    for(let i = start; i <= end; i++){
      arr.push(i);
    }
  } else if(start > end){
    for(let j = start; j >= end; j--){
      arr.push(j);
    }
  }
} 
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let sum = 0;
  for(var i = 0; i < array.length; i++){
    sum += array[i];
  }
  return sum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array, arr=[]) {
  //base case
  if(array.length === 0){
    return arr;
  }
  arr.push(array[array.length - 1]);
  return reverseArray(array.slice(0, -1), arr)
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  //use for loop to access array
  for(let i = 0; i < Math.floor(array.length / 2); i++){
    let first = array[i];
    array[i] = array[array.length - 1 - i];
    array[array.length - i - 1] = first;
  }
 return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
    // Checking whether user has passed a non-empty array as an argument
    if (!array.length) {
        return {};
    }

    // object of the first element of the array
    let list = {
        value: array[0]
    };

    // Base
    //array only contains a single element
    if (array.length == 1) {
        list.rest = null;
        return list;
    }

    // recursion
    //create a list with the remaining elements of array
    list.rest = arrayToList(array.slice(1));

    return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  // Checking whether user has passed a non-empty array as an argument.
  if (!Object.keys(list).length) {
      return [];
  }

  let array = [list.value];

  // Base Step: Node is the TAIL of the List.
  if (list.rest === null) {
      return array;
  }

  // Recursive Step: Concatenate the array returned by calling the function itself
  return array.concat(listToArray(list.rest));
}


////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return {
    value: element,
    rest: list
  }
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
// base
if(!list){
  return undefined;
} 
if(n === 0){
    return list.value;
  } 
  //recursion
    return nth(list.rest, n - 1);

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  //determine if x and y ar both not considered objects
  if(typeof x !== "object" && typeof y !== "object"){
    return x === y;
  }
  //determine if x or y is not an object
  if(typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }
  // create an array of all corresponding values keys
  let xKeys = Object.keys(x);
  let yKeys = Object.keys(y); 
  //determine if lengths are not equal
  if(xKeys.length !== yKeys.length){
    return false;
  }
//iterate through the array of keys to make sure values match
  for(let i = 0; i < xKeys.length; i++){
    //if the keys dont match or the values at each key
    if(!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){
      return false;
    }
  }
  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
